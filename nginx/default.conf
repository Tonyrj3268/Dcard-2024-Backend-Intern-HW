server {
    listen 80;

    resolver 127.0.0.11 valid=30s;
    
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }

    location / {
        default_type application/json;
        content_by_lua_block {
            local redis = require "resty.redis"
            local red = redis:new()

            red:set_timeout(1000) -- 1 秒超时

            local ok, err = red:connect("redis", 6379)
            if not ok then
                ngx.say("Failed to connect to Redis: ", err)
                return
            end

            local key = ngx.var.request_uri
            local method = ngx.req.get_method()
            if method == "GET" then
                local res, err = red:get(key)
                if not res or res == ngx.null then
                    local uri = string.gsub(ngx.var.uri, "/$", "") -- 移除 URI 末尾的斜杠（如果有的話）
                    local new_uri = "/internal_proxy" .. uri
                    if ngx.var.args then
                        new_uri = new_uri .. "?" .. ngx.var.args
                    end
                    local resp = ngx.location.capture(new_uri)
                    if resp.status == 200 then
                        local ok, err = red:setex(key, 60, resp.body)
                        if not ok then
                            ngx.say("Failed to set key: ", err)
                            return
                        end
                        ngx.say(resp.body)
                    else
                        ngx.say("Failed to proxy to app: ", resp.status)
                    end
                else
                    ngx.say(res)
                end
            elseif method == "POST" then
                local res, err = red:get("CreatedAd")
                res = tonumber(res)
                if not res or res == ngx.null then
                    local ok, err = red:setex("CreatedAd", 86400, 1)
                elseif res and res >= 3000 then
                    ngx.say("Today's requests are over 3000")
                    return 
                else
                    local ok, err = red:incr("CreatedAd")
                end 
                ngx.req.read_body()
                ngx.exec("/app" .. ngx.var.uri,{ body = ngx.req.get_body_data() })
            else
                ngx.say("Unsupported request method")
                return
            end

            red:set_keepalive(60000, 100)
        }
    }


    location /internal_proxy/ {
        internal;
        proxy_pass http://app:8080/;
    }

}
