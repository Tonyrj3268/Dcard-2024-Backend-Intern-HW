server {
    listen 80;

    resolver 127.0.0.11 valid=30s;
    
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }

    location /api/v1/ad {
        default_type text/html;
        content_by_lua_block {
            local redis = require "resty.redis"
            local red = redis:new()

            red:set_timeout(1000) -- 1 秒超时

            local ok, err = red:connect("redis", 6379)
            if not ok then
                ngx.say("Failed to connect to Redis: ", err)
                return
            end

            local key = ngx.var.request_uri
            local res, err = red:get(key)
            if not res then
                ngx.say("Failed to get key: ", err)
                return
            end

            if not res or res == ngx.null then
                local uri = string.gsub(ngx.var.uri, "/$", "")
                local resp = ngx.location.capture("/app" .. uri .. "?" .. ngx.var.args)
                if resp.status == 200 then
                    local ok, err = red:setex(key, 600, resp.body)
                    if not ok then
                        ngx.say("Failed to set key: ", err)
                        return
                    end
                    ngx.say(resp.body)
                else
                    ngx.say("Failed to proxy to app: ", resp.status)
                end
            else
                ngx.say(res)
            end

            ok, err = red:close()
            if not ok then
                ngx.say("Failed to close Redis connection: ", err)
                return
            end
        }
    }


    location /app {
        internal;
        proxy_pass http://app:8080;
    }

}
